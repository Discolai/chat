/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConversationInfoFromDiscriminatorValue, serializeConversationInfo, serializeCreateUserConversationRequest, type ConversationInfo, type CreateUserConversationRequest } from '../../models/index.js';
// @ts-ignore
import { type WithConversationItemRequestBuilder, WithConversationItemRequestBuilderNavigationMetadata, WithConversationItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/conversations
 */
export interface ConversationsRequestBuilder extends BaseRequestBuilder<ConversationsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.conversations.item collection
     * @param conversationId Unique identifier of the item
     * @returns {WithConversationItemRequestBuilder}
     */
     byConversationId(conversationId: Guid) : WithConversationItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConversationInfo[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConversationInfo[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConversationInfo>}
     */
     post(body: CreateUserConversationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConversationInfo | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateUserConversationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ConversationsRequestBuilderUriTemplate = "{+baseurl}/api/conversations";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConversationsRequestBuilderNavigationMetadata: Record<Exclude<keyof ConversationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byConversationId: {
        requestsMetadata: WithConversationItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithConversationItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["conversationId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConversationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ConversationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createConversationInfoFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ConversationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createConversationInfoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateUserConversationRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AIModel extends Parsable {
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The provider property
     */
    provider?: AIModelProvider | null;
}
export type AIModelProvider = (typeof AIModelProviderObject)[keyof typeof AIModelProviderObject];
export interface ConversationInfo extends Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The model property
     */
    model?: AIModel | null;
    /**
     * The title property
     */
    title?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AIModel}
 */
// @ts-ignore
export function createAIModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAIModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConversationInfo}
 */
// @ts-ignore
export function createConversationInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConversationInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUserConversationRequest}
 */
// @ts-ignore
export function createCreateUserConversationRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUserConversationRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message}
 */
// @ts-ignore
export function createMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PromptRequest}
 */
// @ts-ignore
export function createPromptRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPromptRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SwitchConversationModelRequest}
 */
// @ts-ignore
export function createSwitchConversationModelRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSwitchConversationModelRequest;
}
export interface CreateUserConversationRequest extends Parsable {
    /**
     * The initialPrompt property
     */
    initialPrompt?: string | null;
    /**
     * The model property
     */
    model?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAIModel(aIModel: Partial<AIModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { aIModel.description = n.getStringValue(); },
        "name": n => { aIModel.name = n.getStringValue(); },
        "provider": n => { aIModel.provider = n.getEnumValue<AIModelProvider>(AIModelProviderObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConversationInfo(conversationInfo: Partial<ConversationInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { conversationInfo.id = n.getGuidValue(); },
        "model": n => { conversationInfo.model = n.getObjectValue<AIModel>(createAIModelFromDiscriminatorValue); },
        "title": n => { conversationInfo.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUserConversationRequest(createUserConversationRequest: Partial<CreateUserConversationRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "initialPrompt": n => { createUserConversationRequest.initialPrompt = n.getStringValue(); },
        "model": n => { createUserConversationRequest.model = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage(message: Partial<Message> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { message.content = n.getStringValue(); },
        "hasError": n => { message.hasError = n.getBooleanValue(); },
        "id": n => { message.id = n.getGuidValue(); },
        "role": n => { message.role = n.getEnumValue<MessageRole>(MessageRoleObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPromptRequest(promptRequest: Partial<PromptRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "prompt": n => { promptRequest.prompt = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSwitchConversationModelRequest(switchConversationModelRequest: Partial<SwitchConversationModelRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "model": n => { switchConversationModelRequest.model = n.getStringValue(); },
    }
}
export interface Message extends Parsable {
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The hasError property
     */
    hasError?: boolean | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The role property
     */
    role?: MessageRole | null;
}
export type MessageRole = (typeof MessageRoleObject)[keyof typeof MessageRoleObject];
export interface PromptRequest extends Parsable {
    /**
     * The prompt property
     */
    prompt?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAIModel(writer: SerializationWriter, aIModel: Partial<AIModel> | undefined | null = {}) : void {
    if (aIModel) {
        writer.writeStringValue("description", aIModel.description);
        writer.writeStringValue("name", aIModel.name);
        writer.writeEnumValue<AIModelProvider>("provider", aIModel.provider);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConversationInfo(writer: SerializationWriter, conversationInfo: Partial<ConversationInfo> | undefined | null = {}) : void {
    if (conversationInfo) {
        writer.writeGuidValue("id", conversationInfo.id);
        writer.writeObjectValue<AIModel>("model", conversationInfo.model, serializeAIModel);
        writer.writeStringValue("title", conversationInfo.title);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUserConversationRequest(writer: SerializationWriter, createUserConversationRequest: Partial<CreateUserConversationRequest> | undefined | null = {}) : void {
    if (createUserConversationRequest) {
        writer.writeStringValue("initialPrompt", createUserConversationRequest.initialPrompt);
        writer.writeStringValue("model", createUserConversationRequest.model);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage(writer: SerializationWriter, message: Partial<Message> | undefined | null = {}) : void {
    if (message) {
        writer.writeStringValue("content", message.content);
        writer.writeBooleanValue("hasError", message.hasError);
        writer.writeGuidValue("id", message.id);
        writer.writeEnumValue<MessageRole>("role", message.role);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePromptRequest(writer: SerializationWriter, promptRequest: Partial<PromptRequest> | undefined | null = {}) : void {
    if (promptRequest) {
        writer.writeStringValue("prompt", promptRequest.prompt);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSwitchConversationModelRequest(writer: SerializationWriter, switchConversationModelRequest: Partial<SwitchConversationModelRequest> | undefined | null = {}) : void {
    if (switchConversationModelRequest) {
        writer.writeStringValue("model", switchConversationModelRequest.model);
    }
}
export interface SwitchConversationModelRequest extends Parsable {
    /**
     * The model property
     */
    model?: string | null;
}
export const AIModelProviderObject = {
    Ollama: "ollama",
    OpenAi: "openAi",
} as const;
export const MessageRoleObject = {
    User: "user",
    Assistant: "assistant",
} as const;
/* tslint:enable */
/* eslint-enable */
